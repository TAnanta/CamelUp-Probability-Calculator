@page
@model IndexModel
@{
    ViewData["Title"] = "Camel Up Probability Calculator";
}

<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: auto;
        box-sizing: border-box;
    }

    .layout {
        display: flex;
        align-items: flex-start;
        width: 100vw;
    }

    .board {
        width: 1200px;
        height: auto;
        margin: 0;
        padding: 0;
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
    }

        .board img {
            width: 1200px;
            height: auto;
            display: block;
        }

    .drop-zone {
        position: absolute;
        width: 110px;
        height: 100px;
        <!--border: 2px dashed #aaa;--> <!--Debug Border for Drop Zone--> 
        border: none;
        box-sizing: border-box;
        z-index: 2;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        flex-direction: column;
        padding: 2px;
    }

        .drop-zone::after {
            content: none;
        }


<!--Debug Drop Zone Title -->
 <!--       .drop-zone::after {   
            content: attr(id);
            color: red;
            font-size: 12px;
            position: absolute;
            top: -18px;
            left: 0;
        }
-->
    .spacer {
        width: 40px;
    }

    .sidebar {
        width: 300px;
        background-color: #fff8dc;
        border-left: 2px solid #c2b280;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding: 10px;
        box-sizing: border-box;
        overflow-y: auto;
    }

        .sidebar h3 {
            width: 100%;
            font-size: 0.95rem;
            text-align: left;
            margin-bottom: 0px;
            margin-top: 15px;
        }

    .camel-holding-area {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    .camel {
        margin: 2px auto 0 auto;
        width: 48px;
        height: auto;
        cursor: grab;
    }

    .info {
        margin-top: 20px;
        font-size: 0.8rem;
        text-align: left;
        width: 100%;
    }

    .dice-select-group {
        margin-top: 10px;
        font-size: 0.75rem;
        width: 100%;
    }

    .dice-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 5px;
        gap: 5px;
    }

        .dice-row label {
            flex-shrink: 0;
        }

        .dice-row select {
            flex-grow: 1;
        }

        .dice-row .number-select {
            width: 50px;
        }

    .winner-box {
        width: 60px;
        text-align: center;
        font-size: 0.75rem;
    }
</style>


<div class="layout">
    <div class="board" id="board">
        <img src="/images/CamelBoard.jpg" alt="Camel Up Board" id="boardImage" />
        @for (int i = 1; i <= 16; i++)
        {
            var topLeft = i switch
            {
                1 => "top: 185px; left: 455px;",
                2 => "top: 140px; left: 595px;",
                3 => "top: 90px; left: 730px;",
                4 => "top: 75px; left: 868px;",
                5 => "top: 160px; left: 990px;",
                6 => "top: 320px; left: 1010px;",
                7 => "top: 475px; left: 990px;",
                8 => "top: 625px; left: 920px;",
                9 => "top: 725px; left: 780px;",
                10 => "top: 785px; left: 600px;",
                11 => "top: 790px; left: 415px;",
                12 => "top: 735px; left: 240px;",
                13 => "top: 620px; left: 110px;",
                14 => "top: 455px; left: 95px;",
                15 => "top: 300px; left: 145px;",
                16 => "top: 230px; left: 295px;",
                _ => ""
            };
            <div class="drop-zone" id="space-@i" style="@topLeft"></div>
        }
    </div>

    <div class="spacer"></div>

    <div class="sidebar" id="sidebar">
        <div class="info">
            <p><strong>How to use the calculator:</strong></p>
            <p>Drag camels onto the board and stack them in the correct order.</p>
            <p>Input the dice rolls. This panel will calculate the probability of each camel accordingly.</p>
        </div>

        <h3>Camels</h3>
        <div id="camelHome" class="camel-holding-area">
            <img src="/images/camel_blue.png" alt="Blue Camel" class="camel" draggable="true" id="camelBlue" />
            <img src="/images/camel_green.png" alt="Green Camel" class="camel" draggable="true" id="camelGreen" />
            <img src="/images/camel_red.png" alt="Red Camel" class="camel" draggable="true" id="camelRed" />
            <img src="/images/camel_yellow.png" alt="Yellow Camel" class="camel" draggable="true" id="camelYellow" />
            <img src="/images/camel_purple.png" alt="Purple Camel" class="camel" draggable="true" id="camelPurple" />
        </div>

        <h3>Dice Rolled</h3>
        <div class="dice-select-group">
            @for (int i = 1; i <= 5; i++)
            {
                var suffix = i == 1 ? "st" : i == 2 ? "nd" : i == 3 ? "rd" : "th";
                <div class="dice-row" data-index="@i">
                    <label>@i<span>@suffix</span> Dice Rolled:</label>
                    <select class="camel-select" data-group="@i" @(i > 1 ? "disabled" : "")>
                        <option value="-">-</option>
                        <option value="Blue">Blue</option>
                        <option value="Green">Green</option>
                        <option value="Red">Red</option>
                        <option value="Yellow">Yellow</option>
                        <option value="Purple">Purple</option>
                    </select>
                    <label>Number:</label>
                    <select class="number-select" data-group="@i" @(i > 1 ? "disabled" : "")>
                        <option value="-">-</option>
                        <option>1</option>
                        <option>2</option>
                        <option>3</option>
                    </select>
                </div>
            }
        </div>

        <h3>Predicted Winner</h3>
        <div class="dice-select-group" id="winnerPrediction">
            <div class="dice-row"><label>Blue:</label><input type="text" readonly class="winner-box" id="winnerBlue" /></div>
            <div class="dice-row"><label>Green:</label><input type="text" readonly class="winner-box" id="winnerGreen" /></div>
            <div class="dice-row"><label>Red:</label><input type="text" readonly class="winner-box" id="winnerRed" /></div>
            <div class="dice-row"><label>Yellow:</label><input type="text" readonly class="winner-box" id="winnerYellow" /></div>
            <div class="dice-row"><label>Purple:</label><input type="text" readonly class="winner-box" id="winnerPurple" /></div>
        </div>
    </div>
</div>

<script>
    let draggedCamel = null;

    function attachDoubleClickToCamels() {
        const camelOrder = ['camelBlue', 'camelGreen', 'camelRed', 'camelYellow', 'camelPurple'];
        document.querySelectorAll('.camel').forEach(camel => {
            camel.ondblclick = function () {
                const home = document.getElementById('camelHome');
                const id = this.id;
                const index = camelOrder.indexOf(id);
                if (index === -1) return;

                const allCamels = Array.from(home.children);
                let inserted = false;
                for (let i = 0; i < allCamels.length; i++) {
                    const currentIndex = camelOrder.indexOf(allCamels[i].id);
                    if (currentIndex > index) {
                        home.insertBefore(this, allCamels[i]);
                        inserted = true;
                        break;
                    }
                }
                if (!inserted) home.appendChild(this);

                Object.assign(this.style, {
                    position: "relative",
                    top: "0",
                    left: "0",
                    margin: "2px 0",
                    width: "48px",
                    height: "auto"
                });

                triggerProbabilityUpdate();
            };
        });
    }

    document.querySelectorAll('.camel').forEach(camel => {
        camel.addEventListener('dragstart', function () {
            draggedCamel = this;
        });
    });

    document.querySelectorAll('.drop-zone').forEach(zone => {
        zone.addEventListener('dragover', e => e.preventDefault());
        zone.addEventListener('drop', function (e) {
            e.preventDefault();
            if (!draggedCamel) return;
            const target = e.target;
            if (target.classList.contains('camel') && target.parentElement === this) {
                const mouseY = e.clientY;
                const rect = target.getBoundingClientRect();
                if (mouseY < rect.top + rect.height / 2) {
                    this.insertBefore(draggedCamel, target);
                } else {
                    this.insertBefore(draggedCamel, target.nextSibling);
                }
            } else {
                this.appendChild(draggedCamel);
            }
            Object.assign(draggedCamel.style, {
                position: "relative",
                top: "0",
                left: "0",
                margin: "2px 0",
                width: "48px",
                height: "auto"
            });
            draggedCamel = null;
            attachDoubleClickToCamels();
            triggerProbabilityUpdate();
        });
    });

    document.querySelectorAll('.camel-select, .number-select').forEach(el => {
        el.addEventListener('change', () => {
            updateDiceDropdownStates();
            triggerProbabilityUpdate();
        });
    });

    function updateDiceDropdownStates() {
        const selectedColors = [];
        for (let i = 1; i <= 5; i++) {
            const colorSel = document.querySelector(`.camel-select[data-group="${i}"]`);
            const numSel = document.querySelector(`.number-select[data-group="${i}"]`);

            const nextColorSel = document.querySelector(`.camel-select[data-group="${i + 1}"]`);
            const nextNumSel = document.querySelector(`.number-select[data-group="${i + 1}"]`);

            const colorVal = colorSel?.value;
            const numVal = numSel?.value;

            if (colorVal && colorVal !== "-" && numVal && numVal !== "-") {
                nextColorSel && (nextColorSel.disabled = false);
                nextNumSel && (nextNumSel.disabled = false);
            } else {
                nextColorSel && (nextColorSel.disabled = true, nextColorSel.value = "-");
                nextNumSel && (nextNumSel.disabled = true, nextNumSel.value = "-");
            }

            if (colorVal && colorVal !== "-") {
                selectedColors.push(colorVal);
            }
        }

        for (let i = 1; i <= 5; i++) {
            const colorSel = document.querySelector(`.camel-select[data-group="${i}"]`);
            const currentVal = colorSel?.value;
            const options = colorSel?.querySelectorAll("option");

            options?.forEach(opt => {
                if (opt.value === "-" || opt.value === currentVal) {
                    opt.disabled = false;
                } else {
                    opt.disabled = selectedColors.includes(opt.value);
                }
            });
        }
    }

    async function triggerProbabilityUpdate() {
        const camelStates = {};
        document.querySelectorAll('.drop-zone').forEach(zone => {
            const camels = Array.from(zone.querySelectorAll('.camel'));
            camels.forEach((camel, index) => {
                camelStates[camel.id.replace('camel', '')] = {
                    DropZone: zone.id,
                    StackIndex: index
                };
            });
        });

        const diceRolled = [];
        for (let i = 1; i <= 5; i++) {
            const color = document.querySelector(`.camel-select[data-group="${i}"]`)?.value;
            const value = document.querySelector(`.number-select[data-group="${i}"]`)?.value;
            if (color && value && color !== "-" && value !== "-") {
                diceRolled.push({ Color: color, Value: parseInt(value) });
            }
        }

        const gameState = { CamelStates: camelStates, DiceRolled: diceRolled };

        const response = await fetch('/api/probability', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(gameState)
        });

        if (response.ok) {
            const result = await response.json();
            for (const [color, percentage] of Object.entries(result)) {
                const input = document.getElementById(`winner${color}`);
                if (input) input.value = `${percentage.toFixed(1)}%`;
            }
        } else {
            console.error('Failed to update probabilities');
        }
    }

    window.addEventListener('load', () => {
        const boardImage = document.getElementById('boardImage');
        const sidebar = document.getElementById('sidebar');
        function matchSidebarHeight() {
            if (boardImage && sidebar) {
                sidebar.style.height = boardImage.clientHeight + 'px';
            }
        }
        matchSidebarHeight();
        window.addEventListener('resize', matchSidebarHeight);
        attachDoubleClickToCamels();
        updateDiceDropdownStates();
        triggerProbabilityUpdate();
    });
</script>
